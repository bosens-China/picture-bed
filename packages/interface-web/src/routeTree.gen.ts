/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as GroupingImport } from './routes/grouping';
import { Route as IndexImport } from './routes/index';
import { Route as GroupingIndexImport } from './routes/grouping/index';
import { Route as GroupingIdImport } from './routes/grouping/$id';

// Create/Update Routes

const GroupingRoute = GroupingImport.update({
  id: '/grouping',
  path: '/grouping',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const GroupingIndexRoute = GroupingIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => GroupingRoute,
} as any);

const GroupingIdRoute = GroupingIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => GroupingRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/grouping': {
      id: '/grouping';
      path: '/grouping';
      fullPath: '/grouping';
      preLoaderRoute: typeof GroupingImport;
      parentRoute: typeof rootRoute;
    };
    '/grouping/$id': {
      id: '/grouping/$id';
      path: '/$id';
      fullPath: '/grouping/$id';
      preLoaderRoute: typeof GroupingIdImport;
      parentRoute: typeof GroupingImport;
    };
    '/grouping/': {
      id: '/grouping/';
      path: '/';
      fullPath: '/grouping/';
      preLoaderRoute: typeof GroupingIndexImport;
      parentRoute: typeof GroupingImport;
    };
  }
}

// Create and export the route tree

interface GroupingRouteChildren {
  GroupingIdRoute: typeof GroupingIdRoute;
  GroupingIndexRoute: typeof GroupingIndexRoute;
}

const GroupingRouteChildren: GroupingRouteChildren = {
  GroupingIdRoute: GroupingIdRoute,
  GroupingIndexRoute: GroupingIndexRoute,
};

const GroupingRouteWithChildren = GroupingRoute._addFileChildren(
  GroupingRouteChildren,
);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/grouping': typeof GroupingRouteWithChildren;
  '/grouping/$id': typeof GroupingIdRoute;
  '/grouping/': typeof GroupingIndexRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/grouping/$id': typeof GroupingIdRoute;
  '/grouping': typeof GroupingIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/grouping': typeof GroupingRouteWithChildren;
  '/grouping/$id': typeof GroupingIdRoute;
  '/grouping/': typeof GroupingIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/grouping' | '/grouping/$id' | '/grouping/';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/grouping/$id' | '/grouping';
  id: '__root__' | '/' | '/grouping' | '/grouping/$id' | '/grouping/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  GroupingRoute: typeof GroupingRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GroupingRoute: GroupingRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/grouping"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/grouping": {
      "filePath": "grouping.tsx",
      "children": [
        "/grouping/$id",
        "/grouping/"
      ]
    },
    "/grouping/$id": {
      "filePath": "grouping/$id.tsx",
      "parent": "/grouping"
    },
    "/grouping/": {
      "filePath": "grouping/index.tsx",
      "parent": "/grouping"
    }
  }
}
ROUTE_MANIFEST_END */
